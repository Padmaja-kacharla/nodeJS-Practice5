const express = require('express')
const app = express()
const path = require('path')
app.use(express.json())
const {open} = require('sqlite')

const sqlite3 = require('sqlite3')
const dbpath = path.join(__dirname, 'moviesData.db')
let db = null
const convertDirectorCase = dbobject => {
  return {
    directorId: dbobject.movie_name,
    directorName: dbobject.director_name,
  }
}

const convertMoviePascalCase = dbobject => {
  return {
    movieId: dbobject.movie_id,
    directorId: dbobject.director_id,
    movieName: dbobject.movie_name,
    leadActor: dbobject.lead_actor,
  }
}
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbpath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('db connected...')
    })
  } catch (e) {
    console.log(`db Error ${e.message}`)
    process.exit(1)
  }
}
initializeDBAndServer()

//get all method
app.get('/movies/', async (request, response) => {
  const getAllMovieQuery = `SELECT * movie_name FROM movie;`
  const movieArray = await db.all(getAllMovieQuery)
  response.send(
    movieArray.map(eachMovie => ({MovieName: eachMovie.movie_name})),
  )
})
//get method
app.get('/movies/:movieId', async (request, response) => {
  const {movieId} = request.params.playerId
  const getQuery = `SELECT movie_id FROM movie
  WHERE movie_id=${movieId}`
  const movie = await db.get(getQuery)
  response.send(movie.map(eachmovie => convertMoviePascalCase(eachmovie)))
})
//post method
app.post('/movie/', async (request, response) => {
  const movieDetails = request.body
  const {directorId, movieName, leadActor} = movieDetails
  const postMovieQuery = `INSERT INTO movie (director_id,movie_name,lead_actor)
   VALUES
   (${directorId},${movieName},${leadActor})`
  const dpResponse = await db.run(postMovieQuery)
  response.send('Movie Successfully Added')
})
//get method
app.put('/movies/:movieId', async (request, response) => {
  const movieIdGet = request.params.movieId
  const {directorId, movieName, leadActor} = movieIdGet
  const putDetailsQuery = `UPDATE movie_id SET 
  director_id=${directorId},
  movie_name=${movieName},
  lead_actor=${leadActor} 
  WHERE 
  movie_id=${movieId}`
  await db.run(putDetailsQuery)
  response.send('Movie Details Updated')
})
//delete method
app.delete('/movies/:movieId', async (request, response) => {
  const deleteId = request.params.movieId
  const {movieId} = deleteId
  const deleteQuery = `DELETE FROM movie
  WHERE movie_id=${movieId}`
  await db.run(deleteQuery)
  response.send('Movie Removed')
})
//get method
app.get('/directors/', async (request, response) => {
  const getDirectorQuery = `SELECT * FROM director`
  const getResult = await db.all(getDirectorQuery)
  response.send(
    getResult.map(eachDirector => convertDirectorCase(eachDirector)),
  )
})
//get method
app.get('/directors/:directorId/movies/', async (request, response) => {
  const {directorId} = request.params.directorId
  const getDirectorQueryResult = `SELECT movie_name FROM
  movie WHERE 
 director_id=${directorId}`
  const getResult = await db.all(getDirectorQueryResult)
  response.send(
    getResult.map(eachDirector => ({MovieName: eachDirector.movie_name})),
  )
})

module.exports = app
